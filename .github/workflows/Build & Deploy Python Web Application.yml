name: Fully-automated-CI-CD-pipeline-Python-Web-App-Deployment

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        id: install_dependencies
        continue-on-error: false
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        id: lint_code
        continue-on-error: false
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        id: unit_testing
        continue-on-error: false
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: pytest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          debug: true
          script: |
            REPO_PATH=/var/www/helloapp/Fully-automated-CI-CD-pipeline-Python-Web-App-Deployment
            VENV_PATH=/home/ec2-user/myvenv1
            SERVICE_NAME=helloapp.service
            SERVICE_PATH=/etc/systemd/system/$SERVICE_NAME
            NGINX_CONF=/etc/nginx/conf.d/helloapp.conf

            # Install Python 3.11, pip, venv, git, and nginx
            sudo dnf update -y
            sudo dnf install -y python3.11 python3.11-pip python3.11-venv git nginx

            # Clone or pull repo
            if [ ! -d $REPO_PATH ]; then
              sudo mkdir -p $REPO_PATH
              sudo chown ec2-user:ec2-user $REPO_PATH
              git clone https://github.com/ABYUF/Fully-automated-CI-CD-pipeline-Python-Web-App-Deployment.git $REPO_PATH
            fi
            cd $REPO_PATH
            git pull origin main

            # Create virtual environment if missing
            if [ ! -d $VENV_PATH ]; then
              python3 -m venv $VENV_PATH
            fi

            source $VENV_PATH/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            # Create systemd service file for Gunicorn
            sudo tee $SERVICE_PATH > /dev/null <<EOF
            [Unit]
            Description=Gunicorn instance to serve helloapp
            After=network.target

            [Service]
            User=ec2-user
            Group=ec2-user
            WorkingDirectory=$REPO_PATH
            Environment="PATH=$VENV_PATH/bin"
            ExecStart=$VENV_PATH/bin/gunicorn --workers 3 --bind 127.0.0.1:8000 src.app:app

            [Install]
            WantedBy=multi-user.target
            EOF

            sudo systemctl daemon-reload
            sudo systemctl enable helloapp.service
            sudo systemctl start helloapp.service

            # Install NGINX if missing
            if ! command -v nginx > /dev/null; then
              sudo dnf install -y nginx
              sudo systemctl enable nginx
              sudo systemctl start nginx
            fi

            # Configure NGINX reverse proxy
            sudo tee $NGINX_CONF > /dev/null <<EOF
            server {
                listen 80;
                server_name _;

                location / {
                    proxy_pass http://127.0.0.1:8000;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOF

            sudo nginx -t
            sudo systemctl reload nginx

            # Show last 20 lines of service log for debugging
            echo "===== Last 20 lines of helloapp.service ====="
            sudo journalctl -u helloapp.service -n 20 --no-pager || true
